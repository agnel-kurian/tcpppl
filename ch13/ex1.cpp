#include <iostream>

using std::cout;
using std::endl;

/*

Fix the error in the definition of List from 13.2.5 and write out C++ code
equivalent to what the compiler must generate for the definition of List and the
function f(). Run a small test case using your hand-generated code and the code
generated by the compiler from the template version. If possible on your system
given your knowledge, compare the generated code.

*/

template<class T> class List {
	struct Link {
		Link* pre;
		Link* suc;
		T val;
		Link(Link* p, Link* s, const T& v) : pre(p), suc(s), val(v) {}
	};

	Link* head;
public:
	List() : head(0) {}
	List(const T& t) : head(new Link(0, 0, t) ) {}
	void print_all() {
		for (Link* p = head; p; p = p->suc) cout << p->val << '\n';
	}
};

class Rec { /* ... */ };
std::ostream& operator <<(std::ostream& os, const Rec& r){
}

void f(List<int>& li, List<Rec>& lr)
{
	li.print_all();
	lr.print_all();
}

namespace int_ns {
class List {
	struct Link {
		Link* pre;
		Link* suc;
		int val;
		Link(Link* p, Link* s, const int& v) : pre(p), suc(s), val(v) {}
	};

	Link* head;
public:
	List() : head(0) {}
	List(const int& t) : head(new Link(0, 0, t) ) {}
	void print_all() {
		for (Link* p = head; p; p = p->suc) cout << p->val << '\n';
	}
};
}

int main(){
	return 0;
}


